receivers:
  filelog:
    include: [ /*/*.log ]
    start_at: beginning
    poll_interval: 500ms
    include_file_path: true
    include_file_name: true
    operators:
      - type: json_parser
        id: parse_json
        if: 'body matches "^\\{"'  # só tenta parsear se começa com {
        timestamp:
          parse_from: attributes.time
          layout: '%Y-%m-%dT%H:%M:%S%z'
        severity:
          parse_from: attributes.level
        body: attributes.message
      - type: regex_parser
        id: parse_plain_log
        if: 'not (body matches "^\\{")'  # só tenta parsear se NÃO começa com {
        regex: '^(?P<time>[^ ]+) \[?(?P<level>[A-Z]+)\]? (?P<application>[^:]+): (?P<message>.+)$'
        timestamp:
          parse_from: attributes.time
          layout: '%Y-%m-%dT%H:%M:%S%z'
        severity:
          parse_from: attributes.level
        body: attributes.message

  otlp:
    protocols:
      grpc:
      http:

processors:
  batch: 

exporters:
  otlp:
    endpoint: tempo:4317
    tls:
      insecure: true  # Desative isso se usar HTTPS
  prometheus:
    endpoint: "localhost:8889"  # Prometheus faz scrape aqui      
  loki:
    endpoint: http://loki:3100/loki/api/v1/push
  debug:
    verbosity: detailed

service:
  pipelines:

    traces:
      receivers: [otlp]
      processors: [batch]
      exporters: [otlp]

    metrics:
      receivers: [otlp]
      processors: [batch]
      exporters: [prometheus]

    logs:
      receivers: [filelog]
      processors: [batch]
      exporters: [loki]

  telemetry:
    logs:
      level: "debug"
